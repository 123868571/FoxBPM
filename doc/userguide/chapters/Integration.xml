<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC '-//OASIS//DTD DocBook XML V5.0//EN'  '../dtd/docbook.dtd'>
    <chapter>
        <title>系统集成</title>
        <para>FoxBPM定位是一个嵌入式的流程引擎，本身不提供表单功能，由于要和自己的业务系统进行集成，所以从大的方面讲，需要设计以下4个方面的集成方案。</para>
        <sect1>
            <title>组织机构集成</title>
            <para>因为流程引擎要负责任务的分配和流程的运转，必须有相应的组织机构模型，那怎么保证自己业务系统中的组织机构和流程引擎的组织机构一致就成了第一个问题?</para>
            <orderedlist>
                <listitem>
                    <para>方案一:将用户和组织机构抽象成了接口，并提供了一套基于表的默认实现，集成方只需要针对自己的组织机构实现相应的接口（如：取用户部门、取用户角色等），然后插入到系统中即可。</para>
                    <itemizedlist>
                        <listitem>
                            <para>在FoxBPM(Fixflow)中，部门和角色都被看成组GroupDefinition，不同的组类型表示不同的意义，用户还可以自己添加新的组（如职称等）。</para>
                            <para>相关配置代码如下</para>
                            <programlisting language="java">&lt;bean id="processEngineConfigurationSpring"  
        class="org.foxbpm.engine.spring.ProcessEngineConfigurationSpring">
        &lt;!-- 这里可能还有其他配置 -->         
        &lt;property name="userDefinition" ref="userDefinition" />  
        &lt;property name="groupDefinitions">  
         &lt;list>  
            &lt;bean class="org.foxbpm.engine.impl.identity.GroupDeptImpl"/> 
            &lt;bean class="org.foxbpm.engine.impl.identity.GroupRoleImpl"/> 
         &lt;/list>  
        &lt;/property>  
 &lt;/bean>  
                            </programlisting>
                            <para>
                                此方案适合比较复杂的组织机构或不是基于表的组织机构。
                            </para>
                        </listitem>
                        
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>方案二：视图方式</para>
                    <para>参考AU_USERINFO,AU_ORGINFO,AU_ROLEINFO,AU_GROUP_RELATION表结构，建立相应的视图。</para>
                    <para>此方案适合大多数基于表的组织机构，强烈推荐用户使用此方案。</para>
                </listitem>
            </orderedlist>
        </sect1>
        <sect1>
            <title>业务数据的关联</title>
            <para>业务系统已经有了业务数据的增删改查，如果让流程中的任务和流程与业务数据进行关联呢，如怎样通过待办任务找到当时提交的报销单内容？</para>
            <para>集成方案：流程实例只记录业务数据的主键，如报销单号，如启动流程的接口：</para>
            <programlisting>
runtimeService.StartProcessByKey(String processKey,String bizKey);
            </programlisting>
            <para>这样在流程引擎中，可以通过业务主键找到业务数据的任何信息，举例来说，报销系统中，流程引擎只记录了报销单号，那通过报销单号就能找到所有的金额，类型，报销人等信息了。</para>
        </sect1>
        <sect1>
            <title>表单集成</title>
            <para>前面已经提到了，FoxBPM作为嵌入式的流程引擎，没有提供表单体系，所以业务系统要提供相关的增删改查界面。但是FoxBPM封装了有很多的处理按钮，那怎么跟将按钮展示到自己的表单上，并能触发相应的事件呢？</para>
            <para>解决方案：FoxBPM有完整前端组件，业务系统的表单只需要引入任务命令组件，在表单初始化方法中提供相应的参数，调用组件的初始化方法，即可在指定的区域绘制出相应的按钮，并赋值相应的事件。</para>
            <para>参考JS代码如下</para>           
            <programlisting>var _getBizKey = function() {
			return $("#expenseId").val();
		};
		var _getTaskComment = function() {
			return "";
		};
		var _flowCommit = function(flowInfo) {
			$("#flowCommandInfo").val(JSON.stringify(flowInfo));
			$("#form1").submit();
		};
		var flowconfig = {
			containterId:’toolbarDiv’
			getBizKey : _getBizKey,
			getTaskComment : _getTaskComment,
			flowCommit : _flowCommit
		};
		var flowCommandCompenent = new Foxbpm.FlowCommandCompenent(
				flowconfig);
		flowCommandCompenent.init();
                
            </programlisting>
            <para>这样就可以将流程上设计的“同意”、“退回”、“转发”能按钮完整的展现到自己的表单上了。</para>
            <note>
                <title>注意</title>
                <para>完整代码请参考foxbpm-webapps-portal项目中的expense报销系统中的表单设计。</para>
            </note>
        </sect1>
        <sect1>
            <title>数据保存和事务整合</title>
            <para>在步骤三中，我们已经将按钮展现到自己的业务表单上，可是我们并没有修改原有表单的post地址，也就是说没有修改Controller的逻辑，那怎么保证流程驱动呢？</para>
            <para>如果你的系统在设计之初考虑的比较完整，用了aop的思想来处理表单数据，那么可以设计一个保存后监听，取到上面的flowCommandInfo的值，并调用流程的相关api驱动就可以完成流程引擎的驱动。</para>
            <para>当然，除了成熟的开发平台，一般的系统是不会设计这么完美的aop结构的，所以还是需要适当的修改Controller或servlet的逻辑的，就是在controller中取到flowCommandInfo的值，并调用流程引擎的相关API即可。</para> 
            <para>这样问题又出来了，怎么保证两遍的事务一致呢？</para>
            <para>FoxBPM默认是集成了spring的事务管理的，所以如果你的系统也是用spring管理事务，那么简单，只需要配置相应的事务管理器即可。</para>
            <para>spring配置代码如下：</para>
            <programlisting>
&lt;bean id="processEngineConfigurationSpring"
		class="org.foxbpm.engine.spring.ProcessEngineConfigurationSpring">
	&lt;property name="dataSource" ref="foxbpmDataSource" />
	&lt;property name="transactionManager" ref="foxbpmTransactionManager" />
&lt;/bean>
                
            </programlisting> 
            <para>这样还是有问题，因为一般系统的事务控制都是设置在service层，而不是在controller层，所以取flowCommandInfo，并调用API的动作应该放到service层，这样才能完整的保证两边的事务一致。</para>
            <para>Service层参考代码如下：</para>   
            <programlisting>
public void applyNewExpense(ExpenseEntity expenseEntity,String flowCommandInfo){
		expenseDao.saveExpenseEntity(expenseEntity);
		
		if(StringUtil.isEmpty(flowCommandInfo)){
			throw new RuntimeException("流程命令参数确实，请检查请求参数");
		}
		//调用api执行任务命令
		workFlowService.executeTaskCommandJson(flowCommandInfo);
	}                
            </programlisting>
            <para>
                如果业务系统没有用spring的事务管理，因为FoxBPM的所有API都是用Command模式执行的，所以只根据自己的事务管理方式，实现一个事务拦截器TransactionInterceptor，并注入到流程引擎中即可。
            </para>

        </sect1>
        <sect1>
            <title>总结</title>
            <para>上面介绍了几个集成需要考虑的角度，下面简单介绍下集成的步骤</para>
            <orderedlist>
                <listitem>
                    <para>将jar包拷到自己项目的lib下。</para>
                </listitem>
                <listitem>
                    <para>配置spring文件，配置好引擎初始化需要参数，如dataSource等。</para>
                </listitem>
                <listitem>
                    <para>
                        将foxbpm-webapps-portal项目下的taskCommand文件夹拷到自己项目中，当然这是比较简单的任务命令集成，也可以自己通过API调用。
                    </para>
                </listitem>
                <listitem>
                    <para>配置web.xml中的rest服务地址。</para>
                </listitem>
                <listitem>
                    <para>修改自己的表单，加入上述的任务命令初始化代码。 </para>
                </listitem>
                <listitem>
                    <para>修改自己的controller或service层代码，将flowCommandInfo参数交给流程引擎，驱动流程运转。</para>
                </listitem>
            </orderedlist>
            
            <para>通过上面几个步骤，配合上foxbpm-webapps-portal项目，基本能解决大部分的集成问题，最后想说一点：</para>
            <para>BPM流程引擎的集成绝不是一个jar包就能解决的问题，工作量也不是一天两天就能完全集成好的，当然，条条大路通罗马，集成方式也是各种各样，但是，集成之前一定要多看文档，
                多分析自己的业务系统，制定一套适合自己的集成方案，这样才能最大的发挥FoxBPM的最大价值，后面才能方便的升级，方便的使用FoxBPM的其他相关插件。</para>
        </sect1>
    </chapter>